name: Build Images

on:
  push: 
    branches: [ "microservices" ]
    paths:
     - FleetMicroservice/src/**
     - UserManagementMicroservice/src/**
     - Rent/src/**
     - .github/workflows/ci_main.yaml

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io

  FLEET_MSVC: FleetMicroservice
  FLEET_IMAGE_NAME: ${{ github.repository }}/fleet # github.repository as <account>/<repo>
  FLEET_SBOM_FILENAME: fleet.sbom.json
  FLEET_SAST_FILENAME: fleet.sarif

  USER_MSVC: UserManagementMicroservice
  USER_IMAGE_NAME: ${{ github.repository }}/user
  USER_SBOM_FILENAME: user.sbom.json
  USER_SAST_FILENAME: user.sarif

  RENT_MSVC: RentMicroservice
  RENT_IMAGE_NAME: ${{ github.repository }}/rent
  RENT_SBOM_FILENAME: rent.sbom.json
  RENT_SAST_FILENAME: rent.sarif

jobs:
  build-fleet:

    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

#      - name: SAST Scan with Bearer
#        uses: bearer/bearer-action@v2
#        with:
#          path: ./${{env.FLEET_MSVC}}
#          output: ./${{env.FLEET_SAST_FILENAME}}
#          scanner: sast,secrets
#
#      - uses: actions/upload-artifact@v4
#        with:
#          name: ${{env.FLEET_SAST_FILENAME}}
#          path: ./${{env.FLEET_SAST_FILENAME}}
#          overwrite: true

#      - name: Official SonarQube Scan
#        uses: SonarSource/sonarqube-scan-action@v2.3.0
#        with:
#          projectBaseDir: ./${{env.FLEET_MSVC}}
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.15.0

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            ${{ runner.os }}-m2-

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FLEET }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B --file ./${{env.FLEET_MSVC}}/pom.xml verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=quarkus-rest-car-rental-service-fleet -Dsonar.projectName='quarkus-rest-car-rental-service-fleet'

#      - name: Maven Package
#        run: mvn clean package --file ./${{env.FLEET_MSVC}}/pom.xml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.FLEET_IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ${{ github.workspace }}/${{env.FLEET_MSVC}}
#          context: .
          file: ${{ github.workspace }}/${{env.FLEET_MSVC}}/src/main/docker/Dockerfile.jvm
          push: true
          #tags: ${{ steps.meta.outputs.tags }}
          tags: ${{ env.REGISTRY }}/${{ env.FLEET_IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Uses Sigstore. Does provenance based on SLSA, using in-toto format
      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.FLEET_IMAGE_NAME }} 
          subject-digest: ${{steps.build-and-push.outputs.digest}}
          push-to-registry: true

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{env.FLEET_IMAGE_NAME}}:latest
          output-file: ${{env.FLEET_SBOM_FILENAME}}
          format: 'cyclonedx-json'
          upload-artifact: false

      - name: Attest SBOM
        uses: actions/attest-sbom@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.FLEET_IMAGE_NAME }}
          subject-digest: ${{steps.build-and-push.outputs.digest}}
          sbom-path: ${{env.FLEET_SBOM_FILENAME}}
          push-to-registry: true

      #- name: Verify image
      #  run: cosign verify --certificate-identity=${{github.workflow_ref}} --certificate-oidc-issuer=https://github.com/login/oauth ${{ env.REGISTRY }}/${{github.actor}}/${{env.FLEET_IMAGE_NAME}}${DIGEST} | jq .

  build-user:

    runs-on: self-hosted
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

#      - name: SAST Scan with Bearer
#        uses: bearer/bearer-action@v2
#        with:
#          path: ./${{env.USER_MSVC}}
#          output: ./${{env.USER_SAST_FILENAME}}
#          scanner: sast,secrets
#
#      - uses: actions/upload-artifact@v4
#        with:
#          name: ${{env.USER_SAST_FILENAME}}
#          path: ./${{env.USER_SAST_FILENAME}}
#          overwrite: true

#      - name: Official SonarQube Scan
#        uses: SonarSource/sonarqube-scan-action@v2.3.0
#        with:
#          projectBaseDir: ./${{env.USER_MSVC}}
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.15.0

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            ${{ runner.os }}-m2-

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_USER }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B --file ./${{env.USER_MSVC}}/pom.xml verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=quarkus-rest-car-rental-service-user -Dsonar.projectName='quarkus-rest-car-rental-service-user'

#      - name: Maven Package
#        run: mvn clean package --file ./${{env.USER_MSVC}}/pom.xml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.USER_IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ${{ github.workspace }}/${{env.USER_MSVC}}
#          context: .
          file: ${{ github.workspace }}/${{env.USER_MSVC}}/src/main/docker/Dockerfile.jvm
          push: true
          #tags: ${{ steps.meta.outputs.tags }}
          tags: ${{ env.REGISTRY }}/${{ env.USER_IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.USER_IMAGE_NAME }} 
          subject-digest: ${{steps.build-and-push.outputs.digest}}
          push-to-registry: true

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{env.USER_IMAGE_NAME}}:latest
          output-file: ${{env.USER_SBOM_FILENAME}}
          format: 'cyclonedx-json'
          upload-artifact: false

      - name: Attest SBOM
        uses: actions/attest-sbom@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.USER_IMAGE_NAME }}  
          subject-digest: ${{steps.build-and-push.outputs.digest}}
          sbom-path: ${{env.USER_SBOM_FILENAME}}
          push-to-registry: true

  build-rent:

    runs-on: self-hosted
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

#      - name: SAST Scan with Bearer
#        uses: bearer/bearer-action@v2
#        with:
#          path: ./${{env.RENT_MSVC}}
#          output: ./${{env.RENT_SAST_FILENAME}}
#          scanner: sast,secrets
#
#      - uses: actions/upload-artifact@v4
#        with:
#          name: ${{env.RENT_SAST_FILENAME}}
#          path: ./${{env.RENT_SAST_FILENAME}}
#          overwrite: true

#      - name: Official SonarQube Scan
#        uses: SonarSource/sonarqube-scan-action@v2.3.0
#        with:
#          projectBaseDir: ./${{env.RENT_MSVC}}
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.15.0

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            ${{ runner.os }}-m2-

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_RENT }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B --file ./${{env.RENT_MSVC}}/pom.xml verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=quarkus-rest-car-rental-service-rent -Dsonar.projectName='quarkus-rest-car-rental-service-rent'

#      - name: Maven Package
#        run: mvn clean package --file ./${{env.RENT_MSVC}}/pom.xml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.RENT_IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ${{ github.workspace }}/${{env.RENT_MSVC}}
#          context: .
          file: ${{ github.workspace }}/${{env.RENT_MSVC}}/src/main/docker/Dockerfile.jvm
          push: true
          #tags: ${{ steps.meta.outputs.tags }}
          tags: ${{ env.REGISTRY }}/${{ env.RENT_IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.RENT_IMAGE_NAME }} 
          subject-digest: ${{steps.build-and-push.outputs.digest}}
          push-to-registry: true

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{env.RENT_IMAGE_NAME}}:latest
          output-file: ${{env.RENT_SBOM_FILENAME}}
          format: 'cyclonedx-json'
          upload-artifact: false

      - name: Attest SBOM
        uses: actions/attest-sbom@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.RENT_IMAGE_NAME }}  
          subject-digest: ${{steps.build-and-push.outputs.digest}}
          sbom-path: ${{env.RENT_SBOM_FILENAME}}
          push-to-registry: true