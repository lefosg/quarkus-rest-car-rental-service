name: Build Images

on:
  push:
    branches: [ "microservices" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io

  FLEET_MSVC: FleetMicroservice
  FLEET_IMAGE_NAME: ${{ github.repository }}/fleet # github.repository as <account>/<repo>
  FLEET_SBOM_FILENAME: fleet.sbom.json
  FLEET_DEPLOYMENT_MANIFEST_PATH: ./k8s/fleet-msvc.yaml

  USER_MSVC: UserManagementMicroservice
  USER_IMAGE_NAME: ${{ github.repository }}/user
  USER_SBOM_FILENAME: user.sbom.json
  USER_DEPLOYMENT_MANIFEST_PATH: ./k8s/user_management-msvc.yaml

  RENT_MSVC: RentMicroservice
  RENT_IMAGE_NAME: ${{ github.repository }}/rent
  RENT_SBOM_FILENAME: rent.sbom.json
  RENT_DEPLOYMENT_MANIFEST_PATH: ./k8s/rent-msvc.yaml

  RESOURCE_GROUP: "quarkus-car-rental-service-rg"
  CLUSTER_NAME: "car-rental-service"

jobs:
  build-fleet:

    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            ${{ runner.os }}-m2-

      - name: Maven Package
        run: mvn clean package --file ./${{env.FLEET_MSVC}}/pom.xml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.FLEET_IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ${{ github.workspace }}/${{env.FLEET_MSVC}}
          file: ${{ github.workspace }}/${{env.FLEET_MSVC}}/src/main/docker/Dockerfile.jvm
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.FLEET_IMAGE_NAME }}
          subject-digest: ${{steps.build-and-push.outputs.digest}}
          push-to-registry: true

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{env.FLEET_IMAGE_NAME}}:microservices
          output-file: ${{env.FLEET_SBOM_FILENAME}}
          format: 'cyclonedx-json'
          upload-artifact: true

      - name: Attest SBOM
        uses: actions/attest-sbom@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.FLEET_IMAGE_NAME }}
          sbom-path: ${{env.FLEET_SBOM_FILENAME}}
          subject-digest: ${{steps.build-and-push.outputs.digest}}
          push-to-registry: true

      #- name: Verify image
      #  run: cosign verify --certificate-identity=${{github.workflow_ref}} --certificate-oidc-issuer=https://github.com/login/oauth ${{ env.REGISTRY }}/${{github.actor}}/${{env.FLEET_IMAGE_NAME}}${DIGEST} | jq .

  deploy-fleet:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [ buildImage ]
    steps:

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'

      # Deploys application based on given manifest file
      - name: Deploys application
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: ${{ env.FLEET_DEPLOYMENT_MANIFEST_PATH }}
          images: ${{ env.REGISTRY }}/${{ env.FLEET_IMAGE_NAME }}:microservices

  build-user:

    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            ${{ runner.os }}-m2-

      - name: Maven Package
        run: mvn clean package --file ./${{env.USER_MSVC}}/pom.xml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.USER_IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ${{ github.workspace }}/${{env.USER_MSVC}}
          file: ${{ github.workspace }}/${{env.USER_MSVC}}/src/main/docker/Dockerfile.jvm
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.USER_IMAGE_NAME }}
          subject-digest: ${{steps.build-and-push.outputs.digest}}
          push-to-registry: true

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{env.USER_IMAGE_NAME}}:microservices
          output-file: ${{env.USER_SBOM_FILENAME}}
          format: 'cyclonedx-json'
          upload-artifact: true

      - name: Attest SBOM
        uses: actions/attest-sbom@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.USER_IMAGE_NAME }}
          sbom-path: ${{env.USER_SBOM_FILENAME}}
          subject-digest: ${{steps.build-and-push.outputs.digest}}
          push-to-registry: true

  build-rent:

    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            ${{ runner.os }}-m2-

      - name: Maven Package
        run: mvn clean package --file ./${{env.RENT_MSVC}}/pom.xml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.RENT_IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ${{ github.workspace }}/${{env.RENT_MSVC}}
          file: ${{ github.workspace }}/${{env.RENT_MSVC}}/src/main/docker/Dockerfile.jvm
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.RENT_IMAGE_NAME }}
          subject-digest: ${{steps.build-and-push.outputs.digest}}
          push-to-registry: true

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{env.RENT_IMAGE_NAME}}:microservices
          output-file: ${{env.RENT_SBOM_FILENAME}}
          format: 'cyclonedx-json'
          upload-artifact: true

      - name: Attest SBOM
        uses: actions/attest-sbom@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.RENT_IMAGE_NAME }}
          sbom-path: ${{env.RENT_SBOM_FILENAME}}
          subject-digest: ${{steps.build-and-push.outputs.digest}}
          push-to-registry: true